<?php

namespace abs\userBundle\Entity;

use FOS\UserBundle\Model\User as BaseUser;
use Doctrine\ORM\Mapping as ORM;
use Doctrine\Common\Collections\ArrayCollection;
use Symfony\Component\Validator\Constraints as Assert;

/**
 * @ORM\Entity
 * @ORM\Table(name="abs_user")
 */
class User extends BaseUser
{
    /**
     * @var int
     *
     * @ORM\Column(name="id", type="integer")
     * @ORM\Id
     * @ORM\GeneratedValue(strategy="AUTO")
     */
    protected $id;

    /**
     * @ORM\Column(name="first_name", type="string", length=255, nullable=false)
     *
     * @Assert\NotBlank(message="Please enter your first name.", groups={"Registration", "Profile"})
     * @Assert\Length(
     *     min=3,
     *     max=255,
     *     minMessage="The first name is too short.",
     *     maxMessage="The first name is too long.",
     *     groups={"Registration", "Profile"}
     * )
     */
    protected $firstName;

    /**
     * @ORM\Column(name="last_name", type="string", length=255, nullable=false)
     *
     * @Assert\NotBlank(message="Please enter your last name.", groups={"Registration", "Profile"})
     * @Assert\Length(
     *     min=3,
     *     max=255,
     *     minMessage="The last name is too short.",
     *     maxMessage="The last name is too long.",
     *     groups={"Registration", "Profile"}
     * )
     */
    protected $lastName;

    /**
     * @ORM\Column(name="address", type="string", length=255, nullable=true)
     *
     * @Assert\NotBlank(message="Please enter your address.", groups={"Registration", "Profile"})
     * @Assert\Length(
     *     min=15,
     *     max=255,
     *     minMessage="The address is too short.",
     *     maxMessage="The address is too long.",
     *     groups={"Registration", "Profile"}
     * )
     */
    protected $address;

    /**
     * @ORM\Column(name="City", type="string", length=255, nullable=true)
     *
     * @Assert\NotBlank(message="Please enter your City.", groups={"Registration", "Profile"})
     */
    protected $city;

    /**
     * @ORM\Column(name="codePostal", type="integer", nullable=true)
     *
     * @Assert\NotBlank(message="Please enter your code postal.", groups={"Registration", "Profile"})
     * @Assert\Length(
     *     min=4,
     *     max=4,
     *     minMessage="The code postal is too short.",
     *     maxMessage="The code postal is too long.",
     *     groups={"Registration", "Profile"}
     * )
     */
    protected $codePostal;

    /**
     * @ORM\Column(name="About", type="string", nullable=true)
     *
     * @Assert\NotBlank(message="About me", groups={"Registration", "Profile"})
     */
    protected $about;

    /**
     * @ORM\Column(name="Status", type="string", nullable=true)
     *
     * @Assert\NotBlank(message="status", groups={"Registration", "Profile"})
     * @Assert\Length(
     *     max=150,
     *     maxMessage="The status is too long.",
     *     groups={"Registration", "Profile"}
     * )
     */
    protected $status;

    /**
     * @ORM\OneToMany(targetEntity="abs\fivepointsBundle\Entity\message", mappedBy="sender")
     */
    private $messages;

    /**
     * @ORM\OneToMany(targetEntity="abs\fivepointsBundle\Entity\conversation", mappedBy="firstUser")
     */
    private $conversations;

    /**
     * Constructor
     */
    public function __construct()
    {
        $this->messages = new \Doctrine\Common\Collections\ArrayCollection();
    }

    /**
     * Set firstName.
     *
     * @param string $firstName
     *
     * @return User
     */
    public function setFirstName($firstName)
    {
        $this->firstName = $firstName;

        return $this;
    }

    /**
     * Get firstName.
     *
     * @return string
     */
    public function getFirstName()
    {
        return $this->firstName;
    }

    /**
     * Set lastName.
     *
     * @param string $lastName
     *
     * @return User
     */
    public function setLastName($lastName)
    {
        $this->lastName = $lastName;

        return $this;
    }

    /**
     * Get lastName.
     *
     * @return string
     */
    public function getLastName()
    {
        return $this->lastName;
    }

    /**
     * Set address.
     *
     * @param string|null $address
     *
     * @return User
     */
    public function setAddress($address = null)
    {
        $this->address = $address;

        return $this;
    }

    /**
     * Get address.
     *
     * @return string|null
     */
    public function getAddress()
    {
        return $this->address;
    }

    /**
     * Set city.
     *
     * @param string|null $city
     *
     * @return User
     */
    public function setCity($city = null)
    {
        $this->city = $city;

        return $this;
    }

    /**
     * Get city.
     *
     * @return string|null
     */
    public function getCity()
    {
        return $this->city;
    }

    /**
     * Set codePostal.
     *
     * @param int|null $codePostal
     *
     * @return User
     */
    public function setCodePostal($codePostal = null)
    {
        $this->codePostal = $codePostal;

        return $this;
    }

    /**
     * Get codePostal.
     *
     * @return int|null
     */
    public function getCodePostal()
    {
        return $this->codePostal;
    }

    /**
     * Set about.
     *
     * @param string|null $about
     *
     * @return User
     */
    public function setAbout($about = null)
    {
        $this->about = $about;

        return $this;
    }

    /**
     * Get about.
     *
     * @return string|null
     */
    public function getAbout()
    {
        return $this->about;
    }

    /**
     * Set status.
     *
     * @param string|null $status
     *
     * @return User
     */
    public function setStatus($status = null)
    {
        $this->status = $status;

        return $this;
    }

    /**
     * Get status.
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->status;
    }

    /**
     * Add message.
     *
     * @param \abs\fivepointsBundle\Entity\message $message
     *
     * @return User
     */
    public function addMessage(\abs\fivepointsBundle\Entity\message $message)
    {
        $this->messages[] = $message;

        return $this;
    }

    /**
     * Remove message.
     *
     * @param \abs\fivepointsBundle\Entity\message $message
     *
     * @return boolean TRUE if this collection contained the specified element, FALSE otherwise.
     */
    public function removeMessage(\abs\fivepointsBundle\Entity\message $message)
    {
        return $this->messages->removeElement($message);
    }

    /**
     * Get messages.
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getMessages()
    {
        return $this->messages;
    }
}
